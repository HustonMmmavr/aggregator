todo
I) oauth
  1) All api is private
  2) ui private - add film, set rating, delete film
  3)
II) MS
  1) add table to aggregator (appName, appKeyForUser, appKeyForFilm, ...) +
  2) tables to services (appName, appKey, life) +
  3) aggregator function, that updates keys
  4)
###########################
oauth


  # if AccessApplication.exists?(:appSecret => token)
    # p 'here'
    # data = AccessApplication.where(:appSecret => token).first

    # p now

Требования

1. Все операции между сервером и клиентом разделить на публичные и закры-тые.
 В REST API для выполнения закрытых операций использовать токен, полу-ченный с помощью OAuth 2 (code flow).

2. Для пользовательского интерфейса реализовать login/password авторизацию, в
результате на успешную авторизацию выдавать токен, идентифицирующий ав-торизованного пользователя.
Все закрытые операции должны выполняться с помощью этого токена. Если для UI используется SPA и вся
 логика работы с сервером реализуется с помощью JavaScript, то токен передавать в заголовке Authorization:
 Bearer <token>. Если используется server rendering и для отправки формы выполняется синхронный submit, то токен
  можно хранить в cookies и пе-редавать через заголовок Cookie: <token-name>=<token>.

3. Регистрацию нового пользователя делать не обязательно,
достаточно создать несколько тестовых пользователей. (+)

4. Пароль в базе хранить в хэшированном виде. (+)

5. Выделить отдельный сервис, отвечающий за авторизацию.
Все запросы от UI и API на проверку токенов делегируютя ему через Aggregation Service. (+)

6. Выданные токены хранить в некотором хранилище
(можно в БД, redis, hazelcast и т.п.). На сервере не использовать встроенную сессию. (?)

7. Для взаимодействия между сервисами использовать токен,
каждый сервис имеет <appnId>/<appSecret>, по этим данным выдается токен с
некоторым вре-менем жизни. По окончанию времени жизни, токен требуется перезапросить.
Авторизационные данные для доступа к каждому сервису знают сами сервисы, эти запросы
не делегируются на Session Service. (in process)
8. Все токены должны иметь время жизни.

9. Для токена, полученного с помощью OAuth2, реализовать refresh токен.

10. Токен, используемый в пользовательском интерфейсе, должен инвалидиро-ваться после 30 минут бездействия.

11. Подготовить пример получения/обновления OAuth 2 токена, выполнения запро-сов к REST API.
